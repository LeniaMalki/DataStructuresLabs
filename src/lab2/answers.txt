

/******************************************************************************
 *  DAT038, TDA417  Datastrukturer och algoritmer, LP2 2019
 *  Lab 2: Autocomplete
 ******************************************************************************/

Name of lab group: 67
Group member A:    Viktor Fredholm
Group member B:    Johannes Mattsson


/******************************************************************************
 *  How many hours did you spend on the assignment?
 *****************************************************************************/

Group member A:    10
Group member B:    10


/******************************************************************************
 *  Describe how your firstIndexOf() method in RangeBinarySearch.java
 *  finds the first index of a key that equals the search key.
 *****************************************************************************/
The search loop looks at the middle element of a given range like a binary search.
When it finds a matching value it checks the element before to see if it is the first one, otherwise continuing with the search as usual.

this gives the complexity of at most 2*log n if the whole search tree contains the wanted element.

/******************************************************************************
 *  What is the worst case time complexity in the number of compares
 *  that each of the operations in the Autocomplete data type make,
 *  as a function of the number of terms n and the number of matching terms m?
 *
 *  You can answer in O() notation, or in order-of-growth notation.
 *  Recall that in both notations you should discard leading coefficients
 *  and lower-order terms, e.g., m^2 + m log n.
 *****************************************************************************/

constructor:  n log n

The copy goes over n terms and the arrays.sort takes n log n time resulting in O(n+n log n) giving us O(n log n). It is not affected by matching terms.


allMatches():   O(log N + M log M)

 O(log N) for find firstindex,  O(log N) for find last index, if all terms match we will create an array of M length that takes M log M time to sort.
 Giving us O(log N + log N + M log M) complexity


numberOfMatches():   O(log N)

We improved it to use binary search directly giving us log n + log n for complexity. Which gives us O(log N) in complexity


/******************************************************************************
 *  Are there any known bugs / limitations?
 *****************************************************************************/

We could'nt get the AutocompleteCLI to run at first. Now everything should work.


/******************************************************************************
 *  Did you collaborate with any other students on this lab?
 *  If so, please write in what way you collaborated and with whom.
 *  Also include any resources (including the web) that you may
 *  may have used in creating your design.
 *****************************************************************************/

Lecture slides, lectures


/******************************************************************************
 *  Describe any serious problems you encountered.                    
 *****************************************************************************/

We could get the client to work after trying some more and found more problems in our code. But at first we couldn't get it to work.


/******************************************************************************
 *  List any other comments here. Feel free to provide any feedback   
 *  on how much you learned from doing the assignment, and whether    
 *  you enjoyed doing it.                                             
 *****************************************************************************/


This was interesting

The assignment was really confusing to get into and to understand what had to be done to make it work,
and we are not sure if it's because all the tasks were too open ended or just unclear what should have been done.
A major contributor was perhaps the given methods and the lack of explanation on what they were supposed to do.
