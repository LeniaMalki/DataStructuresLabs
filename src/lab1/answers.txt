Task 1: figuring out the complexity
-----------------------------------

Insertion.java on:
  random inputs: n^2
  95% sorted inputs: n^2
  sorted inputs: n

Quick.java on:
  random inputs: n lg n
  95% sorted inputs: n lg n
  sorted inputs: n^2

Merge.java on:
  random inputs: n lg n (maybe n)
  95% sorted inputs: n
  sorted inputs: n

Arrays.sort on:
  random inputs: n lg n
  95% sorted inputs: n lg n
  sorted inputs: n

Task 2: improving quicksort
---------------------------

Do the following changes affect the complexity of quicksort on any kind of
input data? If so, what is it that changes?

  Shuffling the array first:
  Yes it affects the complexity. It goes a little bit slower on completely random, but an insignificant amount.
  For 95% sorted it goes a little bit faster but only an insignificant amount.
  For sorted input it goes much faster, it goes from n^2 before the change to n lg n after the change.

  Median-of-three pivot selection: [no] [yes+reason]

  Insertion sort for small arrays: [no] [yes+reason]
  
Which combination of improvements gives the best result?
If you use insertion sort for small arrays, say what cutoff you used.

[...answer here...]
